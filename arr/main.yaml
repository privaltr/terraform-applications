# Certificate for all applications
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: media-apps-tls
  namespace: istio-system
spec:
  secretName: media-apps-https-cert
  dnsNames:
    - "radarr.acc.ricksdomein.nl"
    - "sonarr.acc.ricksdomein.nl"
    - "deluge.acc.ricksdomein.nl"
  issuerRef:
    name: root-ca-issuer
    kind: ClusterIssuer
    group: cert-manager.io

---
# Radarr Service
apiVersion: v1
kind: Service
metadata:
  name: radarr
  namespace: media
  labels:
    app: radarr
    service: radarr
spec:
  ports:
  - name: http
    port: 7878
    targetPort: 7878
  selector:
    app: radarr

---
# Radarr Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: radarr
  namespace: media
  annotations:
    link.argocd.argoproj.io/external-link: https://radarr.acc.ricksdomein.nl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: radarr
  template:
    metadata:
      labels:
        app: radarr
    spec:
      containers:
      - name: radarr
        image: lscr.io/linuxserver/radarr:latest
        ports:
          - containerPort: 7878
        volumeMounts:
          - mountPath: /config
            name: config
          - mountPath: /media
            name: media
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: radarr-config-pvc
        - name: media
          persistentVolumeClaim:
            claimName: media-pvc

---
# Sonarr Service
apiVersion: v1
kind: Service
metadata:
  name: sonarr
  namespace: media
  labels:
    app: sonarr
    service: sonarr
spec:
  ports:
  - name: http
    port: 8989
    targetPort: 8989
  selector:
    app: sonarr

---
# Sonarr Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sonarr
  namespace: media
  annotations:
    link.argocd.argoproj.io/external-link: https://sonarr.acc.ricksdomein.nl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sonarr
  template:
    metadata:
      labels:
        app: sonarr
    spec:
      containers:
      - name: sonarr
        image: lscr.io/linuxserver/sonarr:latest
        ports:
          - containerPort: 8989
        volumeMounts:
          - mountPath: /config
            name: config
          - mountPath: /media
            name: media
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: sonarr-config-pvc
        - name: media
          persistentVolumeClaim:
            claimName: media-pvc

---
# Gateway for all media apps
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: media-gateway
  namespace: media
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 443
        name: https
        protocol: HTTPS
      tls:
        mode: SIMPLE
        credentialName: media-apps-https-cert
      hosts:
        - "radarr.acc.ricksdomein.nl"
        - "sonarr.acc.ricksdomein.nl"
        - "deluge.acc.ricksdomein.nl"

---
# Radarr VirtualService
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: radarr
  namespace: media
spec:
  hosts:
    - "radarr.acc.ricksdomein.nl"
  gateways:
    - media-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: radarr.media.svc.cluster.local
            port:
              number: 7878

---
# Sonarr VirtualService
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: sonarr
  namespace: media
spec:
  hosts:
    - "sonarr.acc.ricksdomein.nl"
  gateways:
    - media-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: sonarr.media.svc.cluster.local
            port:
              number: 8989

---
# Deluge VirtualService
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: deluge
  namespace: media
spec:
  hosts:
    - "deluge.acc.ricksdomein.nl"
  gateways:
    - media-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: deluge.media.svc.cluster.local
            port:
              number: 8112

---
# Deluge Service (updated to include VPN ports)
apiVersion: v1
kind: Service
metadata:
  name: deluge
  namespace: media
  labels:
    app: deluge
    service: deluge
spec:
  ports:
  - name: http
    port: 8112
    targetPort: 8112
  - name: torrent
    port: 6881
    targetPort: 6881
  selector:
    app: deluge

---
apiVersion: v1
kind: Secret
metadata:
  name: pia-credentials
  namespace: media
  annotations:
    avp.kubernetes.io/path: "secret/pia"  # Path to your PIA secrets in Vault
    avp.kubernetes.io/kv-version: "1"
type: Opaque
stringData:
  username: <username>  # AVP will replace this with the value from Vault
  password: <password>  # AVP will replace this with the value from Vault
---
# Deluge Deployment with VPN (Gluetun)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deluge
  namespace: media
  annotations:
    link.argocd.argoproj.io/external-link: https://deluge.acc.ricksdomein.nl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: deluge
  template:
    metadata:
      labels:
        app: deluge
    spec:
      securityContext:
        runAsUser: 0
      containers:
      # Gluetun VPN container
      - name: gluetun
        securityContext:
          capabilities:
            add: ["NET_ADMIN", "NET_RAW"]
          privileged: true
        image: qmcgaw/gluetun:v3.35.0
        env:
        - name: VPN_SERVICE_PROVIDER
          value: "private internet access"  # e.g., "nordvpn", "pia", "surfshark private internet access"
        - name: VPN_TYPE
          value: openvpn
        - name: OPENVPN_USER
          valueFrom:
            secretKeyRef:
              name: pia-credentials  # Will be created by AVP
              key: username
        - name: OPENVPN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pia-credentials  # Will be created by AVP
              key: password
        - name: SERVER_REGIONS
          value: "france"  # Using France specifically
        - name: TZ
          value: "Europe/Amsterdam"
        - name: DOT
          value: "off"
        - name: FIREWALL
          value: "off"  # Disable during troubleshooting
        # - name: HEALTH_SERVER_ADDRESS
        #   value: ":9999"
        # - name: DNS_KEEP_NAMESERVER
        #   value: "on"
        # # - name: HEALTH_VPN_DURATION_INITIAL
        # #   value: "1m"
        # # - name: OPENVPN_FLAGS
        # #   value: "--pull-filter ignore ifconfig-ipv6 --pull-filter ignore route-ipv6"
        # - name: OPENVPN_IPV6
        #   value: "off"
        # - name: FIREWALL_OUTBOUND_SUBNETS
        #   value: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16" # Add your cluster networks
        ports:
          - containerPort: 8112
            name: webui
          - containerPort: 6881
            name: torrent-tcp
          - containerPort: 6881
            name: torrent-udp
            protocol: UDP
        # readinessProbe:
        #   httpGet:
        #     path: /health
        #     port: 9999
        #   initialDelaySeconds: 30
        volumeMounts:
          - mountPath: /gluetun
            name: gluetun-config
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
      
      # Deluge container
      - name: deluge
        image: lscr.io/linuxserver/deluge:latest
        env:
        - name: TZ
          value: "Europe/Amsterdam"
        # - name: WEB_IP
        #   value: "0.0.0.0"  # Listen on all interfaces
        # - name: WEB_PORT
        #   value: "8112"
        # - name: VPN_ENABLED
        #   value: "yes"
        # - name: VPN_CLIENT
        #   value: "gluetun"
        - name: LAN_NETWORK
          value: "172.16.0.0/12"  # Adjust to your cluster network
        - name: UMASK
          value: "002"
        ports:
          - containerPort: 8112
        volumeMounts:
          - mountPath: /config
            name: config
          - mountPath: /downloads
            name: downloads
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: deluge-config-pvc
        - name: downloads
          persistentVolumeClaim:
            claimName: downloads-pvc
        - name: gluetun-config
          emptyDir: {}

---

### Shared Media Volume (for both Radarr and Sonarr)
apiVersion: v1
kind: PersistentVolume
metadata:
  name: media-pv
  labels:
    type: local
    app: media-storage
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi  # Adjust based on your media library size
  accessModes:
    - ReadWriteMany  # Allows multiple pods to access
  hostPath:
    path: "/mnt/data/media"  # Must exist on node
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: media-pvc
  namespace: media
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
  selector:
    matchLabels:
      type: local
      app: media-storage

---
### Radarr Configuration Volume
apiVersion: v1
kind: PersistentVolume
metadata:
  name: radarr-config-pv
  labels:
    type: local
    app: radarr
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data/radarr/config"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: radarr-config-pvc
  namespace: media
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  selector:
    matchLabels:
      type: local
      app: radarr

---
### Sonarr Configuration Volume
apiVersion: v1
kind: PersistentVolume
metadata:
  name: sonarr-config-pv
  labels:
    type: local
    app: sonarr
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data/sonarr/config"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sonarr-config-pvc
  namespace: media
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  selector:
    matchLabels:
      type: local
      app: sonarr

---
### Deluge Configuration Volume
apiVersion: v1
kind: PersistentVolume
metadata:
  name: deluge-config-pv
  labels:
    type: local
    app: deluge
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data/deluge/config"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: deluge-config-pvc
  namespace: media
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  selector:
    matchLabels:
      type: local
      app: deluge

---
### Deluge Downloads Volume
apiVersion: v1
kind: PersistentVolume
metadata:
  name: downloads-pv
  labels:
    type: local
    app: deluge
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi  # Adjust based on your torrent needs
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data/downloads"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: downloads-pvc
  namespace: media
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  selector:
    matchLabels:
      type: local
      app: deluge






# Secret for VPN credentials (create this separately with kubectl)
# kubectl create secret generic vpn-credentials --namespace media \
#   --from-literal=privateKey='your_wireguard_private_key' \
#   --from-literal=addresses='your_wireguard_address' \
#   --from-literal=presharedKey='your_wireguard_preshared_key'
